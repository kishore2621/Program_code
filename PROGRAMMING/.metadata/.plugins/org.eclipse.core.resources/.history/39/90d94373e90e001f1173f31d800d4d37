package org.jsp.Linkedlist;



public class Linkedlist {

	
 Node head=null;
 Node tail=null;
 
 
 
 
 
 public void add(Object ob)
 {
	 Node newNode=new Node(ob);
	 if(head==null)
	 {
		head=newNode;
		tail=newNode;
	 }
	 else
	 {
		 tail.next=newNode;
		 tail=newNode;
	 }
	 
 }
 public String toString()
 {
	 Node current=head;
	 if(head==null)
	 {
		return "[]";
	 }
	 else
	 {
		 String res="[";
		 while(current!=null)
		 {
			 res=res+current.data;
			 if(current.next!=null)
			 {
				 res=res+",";
			 }
			 current=current.next;
		 }
		 return res+"]";
	 }
 }
 
 public void addfront(Object ob)
 {
	 Node newNode = new Node(ob);
	 newNode.next=head;
	 head=newNode;
 }
 
 public Node add(int Index,Object Value)
 {
	 
	 if(head==null && Index !=0)
	 {
		 System.out.println("Empty");
		 return head;
		 
	 }
	
	 Node newNode=new Node(Value);
	 Node current=head ,prev=null;
	 if(Index==0 )
	 {
		 head=newNode;
//		 tail.next=newNode;
		 head.next=current;
		 return head;
	 }
	 int count=0;
		while(current!=null)
		{
			if(count==Index)
			{
				prev.next=newNode;
				 newNode.next=current;	
				break;
			}
			else
			{
				prev=current;
				current=current.next;
				count++;
			}
		}
	 
	 if(current==null)
	 {
		 System.out.println("index out of bounnd");
	 }
	 return head;
 }
 
 public void remove(int Index)
 {
	 Node current = head ,prev=null;
	 
	 if(Index==0 && current !=null)
	 {
		 head=current.next;
		 
	 }
	 else {
	 int count=0;
	 while(current!=null)
	 {
		 if(count==Index)
		 {
			 prev.next=current.next;
			 break;
		 }
		 else 
		 {
			prev=current;
			current=current.next;
			count++;
		 }
	 }
	 }
 }
	 
public void removefirst()
{
	if(head!=null)
	{
		head=head.next;
	}
}

@SuppressWarnings("unused")
public void removeLast()
{
	Node current=head,prev=null;
	if(current==null)
	{
		System.out.println("Empty");
	}
	while(current.next!=null)
	{
		if(current==null)
		{
			prev.next=null;
			break;
		}
		else {
			prev= current;
			current=current.next;
		}
	}
}

public int searchindex(int index,Object value)
{
	
	Node temp=head;
	int c=0;
	while(temp!=null)
	{
		if(c>=index)
		{
			if(temp.data==value)
			{
				return c;
			}
			else {
				c++;
				temp=temp.next;
				
			}
		}
		else {
			c++;
			temp=temp.next;
		}
	
	}
	return -1;
}

}
